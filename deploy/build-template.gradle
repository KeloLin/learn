buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

group = 'com.oneisall.producer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}
dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'
    compile group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect'
    // ......
}

@SuppressWarnings("all")
class OrderedProperties extends Properties {
    private final LinkedHashSet<Object> keys = new LinkedHashSet<Object>()

    @Override
    synchronized Enumeration<Object> keys() {
        return Collections.<Object> enumeration(keys)
    }

    @Override
    synchronized Object put(Object key, Object value) {
        keys.add(key)
        return super.put(key, value)
    }

    @Override
    Set<Object> keySet() {
        return keys
    }

    @Override
    Set<String> stringPropertyNames() {
        Set<String> set = new LinkedHashSet<String>()
        for (Object key : this.keys) {
            set.add((String) key)
        }
        return set
    }

    @Override
    void store(Writer writer, String comments) throws IOException {
        customStore0((writer instanceof BufferedWriter) ? (BufferedWriter) writer
                : new BufferedWriter(writer))
    }

    private void customStore0(BufferedWriter bw)
            throws IOException {
        synchronized (this) {
            for (Enumeration e = keys(); e.hasMoreElements();) {
                String key = (String) e.nextElement()
                String val = (String) get(key)
                bw.write(key + "=" + val)
                bw.newLine()
            }
        }
        bw.flush()
    }
}

def env = System.getProperty("active")

// to enable gradle war task (bootWar task will disable war task)
// @see https://docs.spring.io/spring-boot/docs/2.0.0.M2/gradle-plugin//reference/html/#packaging-executable-and-normal
// gradle war -> package the archive named ROOT.war in ./build/libs/
// SPECIFICALLY :
// To avoid the executable archive and the normal archive from being written to the same location,
// one or the other should be configured to use a different location.
// One way to do so is by configuring a classifier:
war {
    doFirst {
        def propertiesPath = "${buildDir}/resources/main/application.properties"
        OrderedProperties props = new OrderedProperties()
        def propsFileIn = new FileInputStream(propertiesPath)
        props.load(new InputStreamReader(propsFileIn, "UTF-8"))
        if (env) {
            println("检测外部传递了active:[${env}]")
            println("正修改active参数...")
            props.setProperty('spring.profiles.active', env)
            def propsFileOut = new BufferedWriter(new FileWriter(propertiesPath))
            props.store(propsFileOut, null)
            println("修改active参数完成...")
        } else {
            println("使用默认active参数...")
        }
        env = props.getProperty("spring.profiles.active")
        println("请检测:spring.profiles.active=${env}")
    }
    archiveName 'ROOT.war'
    enabled = true
    classifier = 'boot'
}